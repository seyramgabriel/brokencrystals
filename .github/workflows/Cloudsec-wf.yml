name: Cloudsec-wf

on:
   workflow_dispatch:
    inputs:
      devsecops_action:
        type: choice
        description: Select DevSecOps action
        options:
          - sast
          - deploy
          - dast
        required: true

permissions:
  checks: write
  content: write

jobs:
  sast:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.devsecops_action == 'sast' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: SAST Scan
        run: grep -r -e "password" -e "secret" -e "keys" .

      - name: Build server
        run: npm ci && npm run build

      - name: Build client
        run: npm ci --prefix client && npm run build --prefix client

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker images and push
        run: |
          docker-compose --file=docker-compose.local.yml up -d --build
          docker tag brokencrystals_nodejs:latest ${{ secrets.DOCKERHUB_USERNAME }}/brokencrystals:nodejs-${{ github.sha }}
          docker tag postgres:latest ${{ secrets.DOCKERHUB_USERNAME }}/brokencrystals:postgres-${{ github.sha }}
          docker tag sj26/mailcatcher:latest ${{ secrets.DOCKERHUB_USERNAME }}/brokencrystals:mailcatcher-${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/brokencrystals:nodejs-${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/brokencrystals:postgres-${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/brokencrystals:mailcatcher-${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.devsecops_action == 'deploy' }}
    needs: sast
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Load EKS credentials
        run: aws eks update-kubeconfig --name brokencrystals --region us-east-2

      - name: Update Deployment Image
        run: |
          sed -i "s/VERSION_TAG/${{ github.sha }}/g" k8s/app.yaml

      - name: Deploy to EKS
        run: kubectl apply -f k8s/app.yaml --validate=false

      - name: Verify deployment
        id: verify_deployment
        run: |
          kubectl rollout status deployment/nodejs-deployment --timeout=5m
          appurl=$(kubectl get svc nodejs-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "URL=$appurl" >> $GITHUB_OUTPUT

  dast:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.devsecops_action == 'dast' }}
    needs: deploy
    env:
      URL: ${{ needs.deploy.outputs.URL }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Run OWASP ZAP DAST Scan
        continue-on-error: true
        run: |
          mkdir -p zap-output
          chmod 777 -R zap-output/
          [[ ! "$URL" =~ ^http[s]?:// ]] && URL="http://$URL"
          docker run --rm -v "$(pwd)/zap-output:/zap/wrk" zaproxy/zap-stable zap-baseline.py -t "$URL" -r zap-report.html || true

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: zap-output/*.html
